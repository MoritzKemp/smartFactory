// Environment code for project mas.mas2j

import jason.asSyntax.*;
import jason.environment.*;
import jason.environment.grid.GridWorldModel;
import jason.environment.grid.GridWorldView;
import jason.environment.grid.Location;
import java.util.logging.*;

import java.awt.Color;                                                                                        
import java.awt.Font;                                                                                         
import java.awt.Graphics;                                                                                     
import java.util.Random;                                                                                      
import java.util.logging.Logger;  

public class BearingFactory extends Environment {

	public static final int grid_height = 20;
	public static final int grid_width = 20;
	public static final int nAg = 1;
	
	//Static objects
	public static final int stock = 8;
	public static final int assembly_aid_tray = 16;
	public static final int force_fitting_machine = 32;
	public static final int delivery_box = 64;
	
	//Perceptions
	public static final Literal moveRight = Literal.parseLiteral("moveRight");
	
	private BearingFactoryModel model;
	private BearingFactoryView view;
	
    private Logger logger = Logger.getLogger("mas.mas2j."+BearingFactory.class.getName());

    /** Called before the MAS execution with the args informed in .mas2j */
    @Override
    public void init(String[] args) {
        model = new BearingFactoryModel();
		view = new BearingFactoryView(model);
		model.setView(view);
		Literal envSize = Literal.parseLiteral("envSize("+grid_width+","+grid_height+")");
		addPercept(envSize);
		updatePercepts();
    }

    @Override
    public boolean executeAction(String agName, Structure action) {
		try {
			if(action.equals(moveRight)){
				logger.info("moveRight action performed!");
				model.moveRight();
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		informAgsEnvironmentChanged();
		
		try {                                                                                                 
            Thread.sleep(2000);                                                                                
        } catch (Exception e) {}  
		
		updatePercepts();
        return true; // the action was executed with success 
    }
	
	
	// Update agent locations
	public void updatePercepts(){
		clearPercepts();
		Location loc1 = model.getAgPos(0);
		Literal pos1 = Literal.parseLiteral("pos(r1,"+loc1.x+","+loc1.y+")");
		addPercept(pos1);
	}

    /** Called before the end of MAS execution */
    @Override
    public void stop() {
        super.stop();
    }
	
	
	class BearingFactoryModel extends GridWorldModel {
		
		private BearingFactoryModel(){
			super(grid_height, grid_width, nAg);
			add(stock, 2, 2);
			add(assembly_aid_tray, 7, 2);
			setAgPos(0,0,0);
		}
		
		public void moveRight()  throws Exception{
			Location loc_1 = getAgPos(0);
			loc_1.x++;
			setAgPos(0, loc_1);
		}
	}
	
	class BearingFactoryView extends GridWorldView {
		public BearingFactoryView(BearingFactoryModel model){
			super(model, "Bearing Factory", 400);
			setVisible(true);
			repaint();
		}
		
		@Override
		public void draw(Graphics g, int x, int y, int object) {
			
			switch (object) {
				case stock: 
					drawStock(g, x, y); 
					break;
				case assembly_aid_tray: 
					drawAidTray(g, x, y); 
					break;
				case force_fitting_machine: 
					drawMachine(g, x, y); 
					break;
				case delivery_box: 
					drawDeliveryBox(g, x, y);
			}
		}
		
		public void drawStock(Graphics g, int x, int y){
			logger.info("paint stock");
			g.setColor(Color.green);
			super.drawObstacle(g, x, y);
		}
		
		public void drawAidTray(Graphics g, int x, int y){
			logger.info("draw aid tray");
			g.setColor(Color.orange);
			super.drawObstacle(g, x, y);
		}
		
		public void drawMachine(Graphics g, int x, int y){
			super.drawObstacle(g, x, y);
			g.setColor(Color.gray);
		}
		
		public void drawDeliveryBox(Graphics g, int x, int y){
			super.drawObstacle(g, x, y);
			g.setColor(Color.blue);
		}
		
	}
}

